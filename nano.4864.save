use std::io::{self, Write};
use std::fs;
use colored::*;
use serde::{Serialize, Deserialize};

#[derive(Serialize, Deserialize, Clone)]
struct Task {
    id: usize,
    description: String,
    completed: bool,
    category: String,
}

fn save_tasks(tasks: &Vec<Task>) {
    let json = serde_json::to_string_pretty(tasks).expect("Failed to save tasks");
    fs::write("tasks.json", json).expect("Failed to write tasks");
}

fn load_tasks() -> Vec<Task> {
    match fs::read_to_string("tasks.json") {
        Ok(contents) => serde_json::from_str(&contents).unwrap_or_else(|_| Vec::new()),
        Err(_) => Vec::new(),
    }
}

fn main() {
    let mut tasks = load_tasks();
    let mut next_id = tasks.iter().map(|t| t.id).max().unwrap_or(0) + 1;

    println!("{}", "Welcome to Rust Todo List!".green().bold());

    loop {
        println!("\n{}", "=== TODO LIST MENU ===".cyan().bold());
        println!("1. {}", "Add task".green());
        println!("2. {}", "List all tasks".green());
        println!("3. {}", "Mark task as complete".green());
        println!("4. {}", "Delete task".green());
        println!("5. {}", "Exit".yellow());

        print!("\n{}", "Enter your choice (1-5): ".cyan());
        io::stdout().flush().unwrap();
        
        let mut choice = String::new();
        io::stdin()
            .read_line(&mut choice)
            .expect("Failed to read input");

        match choice.trim() {
            "1" => {
                print!("{}", "Enter task description: ".cyan());
                io::stdout().flush().unwrap();
                let mut description = String::new();
                io::stdin()
                    .read_line(&mut description)
                    .expect("Failed to read description");

                print!("{}", "Enter task category: ".cyan());
                io::stdout().flush().unwrap();
                let mut category = String::new();
                io::stdin()
                    .read_line(&mut category)
                    .expect("Failed to read category");

                tasks.push(Task {
                    id: next_id,
                    description: description.trim().to_string(),
                    completed: false,
                    category: category.trim().to_string(),
                });
                
                save_tasks(&tasks);  // Save after adding
                next_id += 1;
                println!("{}", "✓ Task added successfully!".green());
            },
            "2" => {
                if tasks.is_empty() {
                    println!("{}", "No tasks yet!".red());
                } else {
                    println!("\n{}", "Your Tasks:".cyan().bold());
                    for task in &tasks {
                        let status = if task.completed { 
                            "✓".green() 
                        } else { 
                            "○".red() 
                        };
                        println!("{}. [{}] {} ({})", 
                            task.id.to_string().blue(),
                            status,
                            task.description.white(),
                            task.category.yellow());
                    }
                }
            },
            "3" => {
                print!("{}", "Enter task ID to mark as complete: ".cyan());
                io::stdout().flush().unwrap();
                let mut id_input = String::new();
                io::stdin()
                    .read_line(&mut id_input)
                    .expect("Failed to read ID");

                if let Ok(id) = id_input.trim().parse::<usize>() {
                    if let Some(task) = tasks.iter_mut().find(|t| t.id == id) {
                        task.completed = true;
                        save_tasks(&tasks);  // Save after marking complete
                        println!("{}", "✓ Task marked as complete!".green());
                    } else {
                        println!("{}", "Task not found!".red());
                    }
                } else {
                    println!("{}", "Invalid ID!".red());
                }
            },
            "4" => {
                print!("{}", "Enter task ID to delete: ".cyan());
                io::stdout().flush().unwrap();
                let mut id_input = String::new();
                io::stdin()
                    .read_line(&mut id_input)
                    .expect("Failed to read ID");

                if let Ok(id) = id_input.trim().parse::<usize>() {
                    if let Some(index) = tasks.iter().position(|t| t.id == id) {
                        tasks.remove(index);
                        save_tasks(&tasks);  // Save after deleting
                        println!("{}", "✓ Task deleted!".green());
                    } else {
                        println!("{}", "Task not found!".red());
                    }
                } else {
                    println!("{}", "Invalid ID!".red());
                }
            },
            "5" => {
                println!("{}", "Goodbye!".green().bold());
                break;
            },
            _ => println!("{}", "Invalid choice! Please enter 1-5".red()),
        }
    }
}
